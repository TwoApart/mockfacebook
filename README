mockfacebook.sql alltests.py graph_on_fql_test.py schemautil.py graph_on_fql.py graph_test.py graph.py server_test.py server.py download.py testutil.py oauth_test.py oauth.py fql_test.py fql.py

mockfacebook can be used in place of the live Facebook servers as an FQL and
Graph API endpoint. It supports the full FQL query language and all Graph API
endpoints except writing. It can download and uses data from live Facebook, or
you can enter your own data.

mockfacebook includes an automated utility that reads the Facebook developer
docs and example data, infers and stores the current FQL and Graph API schemas,
assists with building a schema mapping, and generates test data. This helps it
stay up to date in the face of Facebook's rapid iteration and API changes. (It's
also better than the Graph API's `?metadata=true`, which is often wrong or out
of date because it's written by hand, not auto-generated from the real schema.)

mockfacebook is backed by SQLite. It's single threaded, so it's not suitable for
load testing, high throughput, or performance. If you need any of that, try
http://www.friendrunner.com/ .

Depends on webapp2 and sqlparse:
http://webapp-improved.appspot.com/
http://code.google.com/p/python-sqlparse/


DEVELOPMENT:
Download webapp2 and sqlparse, then put them in your $PYTHONPATH or add symlinks
to them. Quick instructions:

wget http://webapp-improved.googlecode.com/files/webapp2-2.3.zip
unzip webapp2-2.3.zip
ln -s webapp2-2.3/webapp2.py

wget http://python-sqlparse.googlecode.com/files/sqlparse-0.1.3.tar.gz
tar xzf sqlparse-0.1.3.tar.gz
ln -s sqlparse-0.1.3/sqlparse sqlparse
