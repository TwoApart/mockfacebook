(This text appears on the project page, http://code.google.com/p/mockfacebook/ .
It's formatted with Google Code's wiki markup.)

== About ==

mockfacebook is a standalone HTTP server that implements Facebook's FQL and
Graph API. It's useful for unit and integration testing and limited manual
testing.

It includes a download utility that seeds its database with data and schemas
from Facebook, which helps it keep up with Facebook API changes. You can also
add your own data manually or programmatically.

mockfacebook is backed by SQLite. It's single threaded, so it's not suitable for
load testing, high throughput, or performance.


== Features ==


The [http://developers.facebook.com/docs/reference/api/ Graph API] is served
at the `/...` endpoint. It supports:
  * read access to all object types except `Insights`, `Permissions`, and `Subscription`
  * aliases as well as ids
  * read access to all connection types except `insights`, `mutualfriends`, `payments`, `subscriptions`, and `Comment/likes`
  * multiple selection via `?ids=...`
  * most error codes and messages

[https://developers.facebook.com/docs/reference/fql/ FQL] is served at the
`/method/fql.query` and `/fql` endpoints. It supports:
  * full FQL syntax, including subselects
  * read access to all tables except `insights` and `permissions`
  * indexable columns. returns an error if a non-indexable column is used in a `WHERE` clause.
  * all functions: `me(), now(), strlen(), substr(), strpos()`
  * most error codes and messages
  * JSON and XML output formats

[http://developers.facebook.com/docs/authentication/ OAuth authentication] is
served at the `/dialog/oauth` and `/oauth/access_token` endpoints. It supports:
  * auth codes
  * access tokens
  * server and client side flows
  * app login

See the [http://code.google.com/p/mockfacebook/issues/list issue tracker] for a
list of other features that may eventually be supported.


== Installing ==

mockfacebook depends on [http://webapp-improved.appspot.com/ webapp2], which
comes bundled as a git submodule, and
[http://code.google.com/p/python-sqlparse/ sqlparse], which doesn't. Here are
shell commands to download and install sqlparse:

{{{
# in the mockfacebook dir:
wget http://python-sqlparse.googlecode.com/files/sqlparse-0.1.3.tar.gz
tar xzf sqlparse-0.1.3.tar.gz
ln -s sqlparse-0.1.3/sqlparse sqlparse
}}}


== Using ==

First, you'll need data. The easiest way to get some is the `download.py`
script, which downloads your own data and some public data.

You'll need an access token, which you can get from the
[https://developers.facebook.com/tools/explorer Graph API Explorer]. Click on
the Get Access Token button and select all of the permissions under each tab,
especially `offline_access` under Extended Permissions.

Now, run `download.py ACCESS_TOKEN`. By default, it only downloads a small
amount of data. You can use flags like `--num_per_type`, `--crawl_friends`, and
`--graph_ids` to get more.

You can also add data to the SQLite database directly. See
[http://code.google.com/p/mockfacebook/source/browse/ mockfacebook.sql] and
[http://code.google.com/p/mockfacebook/source/browse/fql_schema.sql fql_schema.sql]
for the table definitions and, if you've run `download.py`,
`graph_data.sql` and `fql_data.sql` for examples. For example:

{{{
sqlite3 mockfacebook.db
...
sqlite> INSERT INTO graph_objects(id, alias, data) VALUES(
  '123',
  'fake_user', 
  '{"id": "123", "username": "fake_user", "first_name": "John", "last_name": "Doe", ...}');
}}}

(You'll need to run `download.py` or `server.py` first to create the database
file.)

Once you have some data, just run `server.py`, point your Facebook app at
`http://localhost:8000/`, and start testing!


<g:plusone size="medium" annotation="none"></g:plusone>
<wiki:gadget width="60" height="30" border="0" title="" style="overflow: hidden" url="http://hosting.gmodules.com/ig/gadgets/file/105726654954270975870/tweet_button3.xml" up_Tweet_text="mockfacebook: a standalone implementation of Facebook's FQL and Graph API" up_Tweet_URL="http://code.google.com/p/mockfacebook/" up_Twitter_user="mockfacebook" /> 
<wiki:gadget border="0" w="60" title="" url="http://hosting.gmodules.com/ig/gadgets/file/110509162544058635853/steegle-google-sites-facebook-like-button.xml" up_url="http://code.google.com/p/mockfacebook/" up_layout="button_count" />
